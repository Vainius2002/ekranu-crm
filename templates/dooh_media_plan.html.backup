{% extends "base.html" %}

{% block content %}
<!-- Header Section -->
<div class="pb-5 border-b border-gray-200 mb-8">
    <div class="flex justify-between items-start">
        <div class="flex items-center">
            <div class="h-12 w-12 rounded-full bg-yellow-100 flex items-center justify-center mr-4">
                <i class="fas fa-play-circle text-yellow-600 text-xl"></i>
            </div>
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Media Planas</h1>
                <p class="mt-1 text-sm text-gray-500">
                    {{ plan.name }} • {{ plan.start_date.strftime('%Y-%m-%d') }} - {{ plan.end_date.strftime('%Y-%m-%d') }}
                </p>
            </div>
        </div>
        <div class="flex space-x-3">
            <button onclick="showAddScreenModal()" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                <i class="fas fa-plus -ml-1 mr-2"></i>
                Pridėti Ekraną
            </button>
            <button onclick="calculateTotals()" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <i class="fas fa-calculator -ml-1 mr-2"></i>
                Perskaičiuoti
            </button>
            {% if plan.screen_bookings|length == 1 %}
            <a href="{{ url_for('screen_detail', id=plan.screen_bookings[0].screen.id) }}" 
               class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500">
                <i class="fas fa-tv -ml-1 mr-2"></i>
                Peržiūrėti Ekraną
            </a>
            {% else %}
            <a href="{{ url_for('dooh_plan_screens', id=plan.id) }}" 
               class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500">
                <i class="fas fa-tv -ml-1 mr-2"></i>
                Valdyti Ekranus
            </a>
            {% endif %}
            <a href="{{ url_for('dooh_plan_detail', id=plan.id) }}" 
               class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <i class="fas fa-arrow-left -ml-1 mr-2"></i>
                Grįžti
            </a>
        </div>
    </div>
</div>

<!-- Media Plan Information Header -->
<div class="bg-white shadow overflow-hidden sm:rounded-lg mb-8">
    <div class="px-4 py-5 sm:px-6">
        <div class="text-center">
            <div class="text-4xl font-bold text-yellow-600 mb-2">{{ plan.screen_bookings|length }}</div>
            <p class="text-sm font-medium text-gray-500 uppercase tracking-wide">Ekranų skaičius</p>
        </div>
    </div>
</div>

{% if not plan.screen_bookings %}
<div class="rounded-md bg-yellow-50 p-4">
    <div class="flex">
        <div class="flex-shrink-0">
            <i class="fas fa-exclamation-triangle text-yellow-400"></i>
        </div>
        <div class="ml-3">
            <h3 class="text-sm font-medium text-yellow-800">Nėra pasirinktų ekranų!</h3>
            <div class="mt-2 text-sm text-yellow-700">
                <p><a href="{{ url_for('dooh_plan_screens', id=plan.id) }}" class="font-medium underline hover:text-yellow-600">Pirmiausia pasirinkite ekranus</a>.</p>
            </div>
        </div>
    </div>
</div>
{% else %}

<!-- Calendar Display (No Week Selection) -->
<div class="bg-white shadow overflow-hidden sm:rounded-lg mb-8">
    <div class="px-4 py-5 sm:px-6 bg-indigo-600">
        <h3 class="text-lg leading-6 font-medium text-white">
            <i class="fas fa-calendar mr-2"></i>Media Plano Kalendorius
        </h3>
    </div>
    <div class="px-4 py-5 sm:px-6">
        <!-- Selected Week Date Display -->
        <div class="text-center mb-6">
            <div id="selectedDateRange" class="text-3xl font-bold text-indigo-600 mb-4">
                {{ plan.start_date.strftime('%Y-%m-%d') }} - {{ plan.end_date.strftime('%Y-%m-%d') }}
            </div>
        </div>
        
        <!-- TV-Planning Style Calendar -->
        <div class="max-w-full mx-auto">
            <div class="overflow-x-auto shadow ring-1 ring-black ring-opacity-5 md:rounded-lg" style="max-height: 400px;">
                <div class="inline-block min-w-full">
                    <table class="min-w-full divide-y divide-gray-200" style="min-width: max-content;">
                    <thead class="bg-indigo-600">
                        <tr id="calendarHeaderRow">
                            <th class="px-4 py-3 text-left text-xs font-medium text-white uppercase tracking-wider" style="min-width: 200px;">Ekranas</th>
                            <!-- Calendar headers will be populated by JavaScript -->
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        {% for booking in plan.screen_bookings %}
                        <tr class="calendar-screen-row" data-screen-id="{{ booking.screen.id }}">
                            <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 bg-gray-50" style="min-width: 200px;">
                                <div class="flex items-center">
                                    <div class="h-8 w-8 rounded-full bg-yellow-100 flex items-center justify-center mr-3">
                                        <i class="fas fa-tv text-yellow-600 text-sm"></i>
                                    </div>
                                    <div>
                                        <div class="font-semibold">{{ booking.screen.name }}</div>
                                        <div class="text-xs text-gray-500">{{ booking.screen.provider.name }}</div>
                                    </div>
                                </div>
                            </td>
                            <!-- Screen-specific calendar cells will be populated by JavaScript -->
                        </tr>
                        {% endfor %}
                        <tr class="bg-green-600 text-white" id="totalsRow">
                            <td class="px-4 py-3 font-bold text-center">VISO</td>
                            <!-- Total cells will be populated by JavaScript -->
                        </tr>
                    </tbody>
                    </table>
                </div>
            </div>
            <!-- Scroll hint -->
            <div class="text-center mt-2">
                <p class="text-sm text-gray-500 scroll-hint">
                    <i class="fas fa-arrows-alt-h mr-1"></i>
                    Slinkite horizontaliai peržiūrėti visas dienas
                </p>
            </div>
        </div>
    </div>
</div>


<!-- New Week Calendar (Initially Hidden) -->
<div class="card mb-4" id="newWeekCalendarCard" style="display: none;">
    <div class="card-header bg-success text-white">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0"><i class="fas fa-calendar-plus me-2"></i>Sukurti Naują Savaitę</h5>
            <button class="btn btn-light btn-sm" onclick="cancelNewWeek()">
                <i class="fas fa-times"></i> Atšaukti
            </button>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-8">
                <!-- New Week Calendar Grid -->
                <div class="calendar-grid">
                    <div class="calendar-header">
                        <div class="calendar-month" id="newWeekCurrentMonth">
                            {{ plan.start_date.strftime('%Y %B') }}
                        </div>
                    </div>
                    <div class="calendar-weekdays">
                        <div class="weekday">Pr</div>
                        <div class="weekday">An</div>
                        <div class="weekday">Tr</div>
                        <div class="weekday">Kt</div>
                        <div class="weekday">Pn</div>
                        <div class="weekday">Št</div>
                        <div class="weekday">Sk</div>
                    </div>
                    <div class="calendar-dates" id="newWeekCalendarDates">
                        <!-- Calendar dates will be populated by JavaScript -->
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="new-week-info">
                    <div id="newWeekRange" class="text-success fw-bold fs-5 mb-3">
                        Pasirinkite savaitę...
                    </div>
                    <div class="mb-3">
                        <label for="newWeekName" class="form-label">Naujos savaitės pavadinimas:</label>
                        <input type="text" id="newWeekName" class="form-control mb-2" placeholder="pvz. Savaitė 2">
                        <button class="btn btn-success w-100" onclick="confirmCreateNewWeek()" disabled id="confirmNewWeekBtn">
                            <i class="fas fa-save me-2"></i>Sukurti savaitę
                        </button>
                    </div>
                    <div class="mt-2">
                        <small class="text-muted">
                            Nauja savaitė bus sukurta pagal pasirinktą datų intervalą
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Screen Modal (Initially Hidden) -->
<div class="fixed inset-0 bg-gray-600 bg-opacity-50 z-50 hidden" id="addScreenModal">
    <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:p-0">
        <div class="inline-block bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-green-100 sm:mx-0 sm:h-10 sm:w-10">
                        <i class="fas fa-tv text-green-600"></i>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">
                            Pridėti Ekraną
                        </h3>
                        <div class="mt-4">
                            <label for="screenSelect" class="block text-sm font-medium text-gray-700">Pasirinkite ekraną:</label>
                            <select id="screenSelect" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                <option value="">Pasirinkite ekraną...</option>
                                <!-- Options will be populated by JavaScript -->
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" onclick="addScreenToMediaPlan()" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm">
                    <i class="fas fa-plus mr-2"></i>
                    Pridėti
                </button>
                <button type="button" onclick="hideAddScreenModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                    Atšaukti
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Media Plan Summary (Below Calendar) -->
<div class="bg-white shadow overflow-hidden sm:rounded-lg mb-6">
    <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
            <i class="fas fa-chart-bar mr-2 text-blue-600"></i>Media Plano Suvestinė
        </h3>
    </div>
    <div class="px-6 py-4">
        <div class="grid grid-cols-1 gap-5 sm:grid-cols-3">
            <div class="bg-blue-50 overflow-hidden shadow rounded-lg">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <i class="fas fa-play-circle text-blue-600 text-2xl"></i>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Viso transliacijų</dt>
                                <dd class="text-lg font-medium text-gray-900" id="totalSlots">0</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="bg-green-50 overflow-hidden shadow rounded-lg">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <i class="fas fa-euro-sign text-green-600 text-2xl"></i>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Bendra kaina</dt>
                                <dd class="text-lg font-medium text-gray-900" id="totalCost">0.00€</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="bg-yellow-50 overflow-hidden shadow rounded-lg">
                <div class="p-5">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <i class="fas fa-percentage text-yellow-600 text-2xl"></i>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Vidutinis CPT</dt>
                                <dd class="text-lg font-medium text-gray-900" id="avgCPT">0.00€</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Instructions for Users -->
<div class="bg-blue-50 border border-blue-200 rounded-md p-4 mb-6">
    <div class="flex">
        <div class="flex-shrink-0">
            <i class="fas fa-info-circle text-blue-400"></i>
        </div>
        <div class="ml-3">
            <h3 class="text-sm font-medium text-blue-800">
                Kaip naudoti media planą
            </h3>
            <div class="mt-2 text-sm text-blue-700">
                <ul class="list-disc pl-5 space-y-1">
                    <li>Įveskite transliacijų skaičių kiekvienai dienai ir ekranui kalendoriuje</li>
                    <li>Skaičiavimai atsinaujins automatiškai kaskart keičiant reikšmes</li>
                    <li>Naudokite "Pridėti Ekraną" mygtuką, kad pridėtumėte daugiau ekranų į planą</li>
                    <li>Bendroji suma ir statistikos pateikiamos aukščiau esančioje suvestinėje</li>
                </ul>
            </div>
        </div>
    </div>
</div>

{% endif %}

<script>
            </div>
            <div class="flex items-center space-x-4">
                <div class="flex items-center space-x-2">
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                        CPT: <span class="cpt-value ml-1">0.00</span>€
                    </span>
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
                        Klipo trukmė: 
                        <input type="number" class="clip-duration-input ml-1 w-8 text-center bg-transparent border-none text-gray-800" value="15" min="1" max="60">s
                    </span>
                </div>
                <button class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" onclick="copyToAllDays({{ booking.id }})">
                    <i class="fas fa-copy -ml-1 mr-2"></i>
                    Kopijuoti į visas dienas
                </button>
            </div>
        </div>
    </div>
    <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-indigo-600">
                <tr>
                    <th scope="col" class="px-4 py-3 text-center text-xs font-medium text-white uppercase tracking-wider" style="min-width: 100px;">Laikas</th>
                    <th scope="col" class="px-4 py-3 text-center text-xs font-medium text-white uppercase tracking-wider" style="min-width: 80px;">Kartai</th>
                    <th scope="col" class="px-4 py-3 text-center text-xs font-medium text-white uppercase tracking-wider" style="min-width: 80px;">Suma</th>
                    <th scope="col" class="px-4 py-3 text-center text-xs font-medium text-white uppercase tracking-wider" style="min-width: 80px;">Kartai</th>
                    <th scope="col" class="px-4 py-3 text-center text-xs font-medium text-white uppercase tracking-wider" style="min-width: 80px;">Suma</th>
                    <th scope="col" class="px-4 py-3 text-center text-xs font-medium text-white uppercase tracking-wider" style="min-width: 80px;">VISO</th>
                </tr>
            </thead>
                <tbody>
                    {% for hour in range(6, 24) %}
                    <tr class="time-row-{{ hour }}">
                        <td class="text-center align-middle bg-light">
                            <strong>{{ "%02d"|format(hour) }}.00-{{ "%02d"|format(hour + 1) }}.00</strong>
                        </td>
                        <!-- First kartai column -->
                        <td class="text-center p-1">
                            <input type="number" 
                                   class="form-control form-control-sm kartai-input text-center" 
                                   min="0" max="999" 
                                   value="0"
                                   data-booking="{{ booking.id }}"
                                   data-hour="{{ hour }}"
                                   data-row="1"
                                   onchange="calculateTotals()"
                                   style="width: 60px;">
                        </td>
                        <!-- First suma column -->
                        <td class="text-center p-1 bg-light">
                            <span class="suma-display small text-muted" id="suma_{{ booking.id }}_{{ hour }}_1">0.00€</span>
                        </td>
                        <!-- Second kartai column -->
                        <td class="text-center p-1">
                            <input type="number" 
                                   class="form-control form-control-sm kartai-input text-center" 
                                   min="0" max="999" 
                                   value="0"
                                   data-booking="{{ booking.id }}"
                                   data-hour="{{ hour }}"
                                   data-row="2"
                                   onchange="calculateTotals()"
                                   style="width: 60px;">
                        </td>
                        <!-- Second suma column -->
                        <td class="text-center p-1 bg-light">
                            <span class="suma-display small text-muted" id="suma_{{ booking.id }}_{{ hour }}_2">0.00€</span>
                        </td>
                        <!-- Hour total column -->
                        <td class="text-center align-middle bg-warning">
                            <strong class="hour-grand-total" data-hour="{{ hour }}">0</strong>
                        </td>
                    </tr>
                    {% endfor %}
                    
                    <!-- Grand total row -->
                    <tr class="bg-success fw-bold text-white">
                        <td class="text-center align-middle">
                        </td>
                        <td class="text-center align-middle">
                            <div class="mb-1"><small>VISO</small></div>
                            <strong class="row-total-1">0</strong>
                        </td>
                        <td class="text-center align-middle">
                            <div class="mb-1"><small>€</small></div>
                            <strong class="suma-total-1">0.00€</strong>
                        </td>
                        <td class="text-center align-middle">
                            <div class="mb-1"><small>VISO</small></div>
                            <strong class="row-total-2">0</strong>
                        </td>
                        <td class="text-center align-middle">
                            <div class="mb-1"><small>€</small></div>
                            <strong class="suma-total-2">0.00€</strong>
                        </td>
                        <td class="text-center align-middle">
                            <div class="mb-1"><small>BENDRAI</small></div>
                            <strong class="screen-grand-total">0.00€</strong>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endfor %}


{% endif %}

<script>
// Global variables
let currentWeekStart = new Date('{{ plan.start_date.strftime('%Y-%m-%d') }}');
const planStartDate = new Date('{{ plan.start_date.strftime('%Y-%m-%d') }}');
const planEndDate = new Date('{{ plan.end_date.strftime('%Y-%m-%d') }}');
const planId = {{ plan.id }};

// Modal functions
function showAddScreenModal() {
    const modal = document.getElementById('addScreenModal');
    const screenSelect = document.getElementById('screenSelect');
    
    // Load available screens
    fetch('/api/screens/available/' + planId)
        .then(response => response.json())
        .then(screens => {
            screenSelect.innerHTML = '<option value="">Pasirinkite ekraną...</option>';
            screens.forEach(screen => {
                const option = document.createElement('option');
                option.value = screen.id;
                option.textContent = `${screen.name} (${screen.provider_name})`;
                screenSelect.appendChild(option);
            });
        })
        .catch(error => console.error('Error loading screens:', error));
    
    modal.classList.remove('hidden');
}

function hideAddScreenModal() {
    const modal = document.getElementById('addScreenModal');
    modal.classList.add('hidden');
    document.getElementById('screenSelect').value = '';
}

function addScreenToMediaPlan() {
    const screenId = document.getElementById('screenSelect').value;
    
    if (!screenId) {
        alert('Prašome pasirinkti ekraną.');
        return;
    }
    
    // Send request to add screen to media plan
    fetch(`/api/dooh-plan/${planId}/add-screen`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            screen_id: screenId
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Reload the page to show the new screen
            location.reload();
        } else {
            alert('Klaida pridedant ekraną: ' + (data.message || 'Nežinoma klaida'));
        }
    })
    .catch(error => {
        console.error('Error adding screen:', error);
        alert('Klaida pridedant ekraną.');
    });
}

// Calendar functions
function initializeCalendar() {
    generateCalendar();
    updateSelectedWeekRange();
}

function generateCalendar() {
    const calendarHeaderRow = document.getElementById('calendarHeaderRow');
    const totalsRow = document.getElementById('totalsRow');
    const screenRows = document.querySelectorAll('.calendar-screen-row');
    
    // Clear previous calendar content (keep the first header cell "Ekranas")
    while (calendarHeaderRow.children.length > 1) {
        calendarHeaderRow.removeChild(calendarHeaderRow.lastChild);
    }
    
    // Clear screen row cells (keep the first cell with screen info)
    screenRows.forEach(row => {
        while (row.children.length > 1) {
            row.removeChild(row.lastChild);
        }
    });
    
    // Clear totals row (keep the first cell "VISO")
    while (totalsRow.children.length > 1) {
        totalsRow.removeChild(totalsRow.lastChild);
    }
    
    const monthNames = ['Sausis', 'Vasaris', 'Kovas', 'Balandis', 'Gegužė', 'Birželis', 'Liepa', 'Rugpjūtis', 'Rugsėjis', 'Spalis', 'Lapkritis', 'Gruodis'];
    
    // Calculate total days in plan period
    const timeDiff = planEndDate - planStartDate;
    const totalDays = Math.ceil(timeDiff / (1000 * 60 * 60 * 24)) + 1;
    
    // Generate headers and cells for all days in the plan period
    for (let day = 0; day < totalDays; day++) {
        const date = new Date(planStartDate);
        date.setDate(planStartDate.getDate() + day);
        
        // Create header cell
        const dayNames = ['Sk', 'Pr', 'An', 'Tr', 'Kt', 'Pn', 'Št'];
        const headerCell = document.createElement('th');
        headerCell.className = 'px-2 py-3 text-center text-xs font-medium text-white uppercase tracking-wider';
        headerCell.style.minWidth = '100px';
        
        const monthStr = (date.getMonth() + 1).toString().padStart(2, '0');
        const dayStr = date.getDate().toString().padStart(2, '0');
        headerCell.innerHTML = `
            <div>${dayNames[date.getDay()]}</div>
            <div class="text-xs font-normal">${monthStr}-${dayStr}</div>
        `;
        calendarHeaderRow.appendChild(headerCell);
        
        // Create cells for each screen row
        screenRows.forEach(screenRow => {
            const screenId = screenRow.dataset.screenId;
            const dayCell = document.createElement('td');
            dayCell.className = 'px-2 py-3 text-center border border-gray-200';
            dayCell.style.minWidth = '100px';
            dayCell.innerHTML = `
                <div class="space-y-1">
                    <input type="number" 
                           class="w-16 px-1 py-1 text-xs border border-gray-300 rounded text-center slots-input" 
                           placeholder="0" 
                           data-screen-id="${screenId}" 
                           data-day="${day}"
                           onchange="calculateTotals()">
                    <div class="text-xs text-gray-500 daily-cost" id="cost_${screenId}_${day}">0.00€</div>
                </div>
            `;
            screenRow.appendChild(dayCell);
        });
        
        // Create total cell
        const totalCell = document.createElement('td');
        totalCell.className = 'px-2 py-3 text-center font-bold text-white';
        totalCell.id = `dayTotal_${day}`;
        totalCell.textContent = '0.00€';
        totalsRow.appendChild(totalCell);
    }
}

function isDateInCurrentWeek(date) {
    const weekEnd = new Date(currentWeekStart);
    weekEnd.setDate(weekEnd.getDate() + 6);
    return date >= currentWeekStart && date <= weekEnd;
}

function selectWeekFromDate(date) {
    // Get Monday of the week containing this date
    const dayOfWeek = date.getDay();
    const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // Handle Sunday
    currentWeekStart = new Date(date);
    currentWeekStart.setDate(date.getDate() + mondayOffset);
    
    generateCalendar();
    updateSelectedWeekRange();
}

function updateSelectedWeekRange() {
    const weekEnd = new Date(currentWeekStart);
    weekEnd.setDate(weekEnd.getDate() + 6);
    
    const formatDate = (date) => {
        return date.getFullYear() + '-' + 
               String(date.getMonth() + 1).padStart(2, '0') + '-' + 
               String(date.getDate()).padStart(2, '0');
    };
    
    const rangeText = formatDate(currentWeekStart) + ' - ' + formatDate(weekEnd);
    document.getElementById('selectedWeekRange').textContent = rangeText;
}

function previousWeek() {
    const newWeekStart = new Date(currentWeekStart);
    newWeekStart.setDate(newWeekStart.getDate() - 7);
    
    if (newWeekStart >= planStartDate) {
        currentWeekStart = newWeekStart;
        generateCalendar();
        updateSelectedWeekRange();
    }
}

function nextWeek() {
    const newWeekStart = new Date(currentWeekStart);
    newWeekStart.setDate(newWeekStart.getDate() + 7);
    
    if (newWeekStart <= planEndDate) {
        currentWeekStart = newWeekStart;
        generateCalendar();
        updateSelectedWeekRange();
    }
}

function calculateTotals() {
    const timeDiff = planEndDate - planStartDate;
    const totalDays = Math.ceil(timeDiff / (1000 * 60 * 60 * 24)) + 1;
    let dailyTotals = new Array(totalDays).fill(0);
    
    // Get all screen rows
    const screenRows = document.querySelectorAll('.calendar-screen-row');
    
    screenRows.forEach(screenRow => {
        const screenId = screenRow.dataset.screenId;
        let screenTotalCost = 0;
        
        // Calculate cost for each day for this screen
        for (let day = 0; day < totalDays; day++) {
            const slotsInput = screenRow.querySelector(`input[data-screen-id="${screenId}"][data-day="${day}"]`);
            const costDisplay = screenRow.querySelector(`#cost_${screenId}_${day}`);
            
            if (slotsInput && costDisplay) {
                const slots = parseInt(slotsInput.value || 0);
                
                // Calculate cost - for now using a base rate of €5 per slot
                // TODO: This should use actual screen pricing data
                const dailyCost = slots * 5.0;
                screenTotalCost += dailyCost;
                dailyTotals[day] += dailyCost;
                
                // Update daily cost display
                costDisplay.textContent = dailyCost.toFixed(2) + '€';
            }
        }
        
        // Update screen total (if we add a screen total display later)
        // screenRow.querySelector('.screen-total').textContent = screenTotalCost.toFixed(2) + '€';
    });
    
    // Update daily totals in the totals row
    for (let day = 0; day < totalDays; day++) {
        const totalCell = document.getElementById(`dayTotal_${day}`);
        if (totalCell) {
            totalCell.textContent = dailyTotals[day].toFixed(2) + '€';
        }
    }
    
    // Calculate and display overall totals
    let totalSlots = 0;
    let totalCost = dailyTotals.reduce((sum, cost) => sum + cost, 0);
    
    document.querySelectorAll('.slots-input').forEach(input => {
        totalSlots += parseInt(input.value || 0);
    });
    
    // Update summary displays if they exist
    const totalSlotsElement = document.getElementById('totalSlots');
    const totalCostElement = document.getElementById('totalCost');
    const avgCPTElement = document.getElementById('avgCPT');
    
    if (totalSlotsElement) totalSlotsElement.textContent = totalSlots;
    if (totalCostElement) totalCostElement.textContent = totalCost.toFixed(2) + '€';
    if (avgCPTElement) {
        const avgCPT = totalSlots > 0 ? (totalCost * 1000) / totalSlots : 0;
        avgCPTElement.textContent = avgCPT.toFixed(2) + '€';
    }
}

function updateCalendarCPT(dailyTotals) {
    // Update calendar day displays
    for (let day = 0; day < 7; day++) {
        const cptElement = document.getElementById(`cpt_day_${day}`);
        if (cptElement) {
            cptElement.textContent = dailyTotals[day].toFixed(2) + '€';
        }
    }
    
    // Update total row
    const dayIds = ['mondayTotal', 'tuesdayTotal', 'wednesdayTotal', 'thursdayTotal', 'fridayTotal', 'saturdayTotal', 'sundayTotal'];
    for (let day = 0; day < 7; day++) {
        const totalElement = document.getElementById(dayIds[day]);
        if (totalElement) {
            totalElement.textContent = dailyTotals[day].toFixed(2) + '€';
        }
    }
}

function loadSelectedWeek() {
    alert('Pasirinktos savaitės duomenų įkėlimas - funkcionalumas bus pridėtas vėliau');
}

// New week creation functions
let newWeekStart = null;

function createNewWeek() {
    const newWeekCard = document.getElementById('newWeekCalendarCard');
    newWeekCard.style.display = 'block';
    
    // Initialize new week calendar
    generateNewWeekCalendar();
    
    // Scroll to new week calendar
    newWeekCard.scrollIntoView({ behavior: 'smooth' });
}

function cancelNewWeek() {
    const newWeekCard = document.getElementById('newWeekCalendarCard');
    newWeekCard.style.display = 'none';
    
    // Reset values
    newWeekStart = null;
    document.getElementById('newWeekName').value = '';
    document.getElementById('newWeekRange').textContent = 'Pasirinkite savaitę...';
    document.getElementById('confirmNewWeekBtn').disabled = true;
}

function generateNewWeekCalendar() {
    const calendarDates = document.getElementById('newWeekCalendarDates');
    const currentMonth = document.getElementById('newWeekCurrentMonth');
    
    const year = planStartDate.getFullYear();
    const month = planStartDate.getMonth();
    
    currentMonth.textContent = new Date(year, month).toLocaleDateString('lt-LT', { year: 'numeric', month: 'long' });
    
    // Clear previous dates
    calendarDates.innerHTML = '';
    
    // Get first day of month and number of days
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay() + 1); // Start from Monday
    
    // Generate 6 weeks of calendar
    for (let week = 0; week < 6; week++) {
        for (let day = 0; day < 7; day++) {
            const date = new Date(startDate);
            date.setDate(startDate.getDate() + week * 7 + day);
            
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-date new-week-calendar-date';
            dayElement.textContent = date.getDate();
            
            // Add classes based on date status
            if (date.getMonth() !== month) {
                dayElement.classList.add('other-month');
            }
            if (date < planStartDate || date > planEndDate) {
                dayElement.classList.add('disabled');
            } else {
                dayElement.addEventListener('click', () => selectNewWeekFromDate(date));
            }
            
            // Highlight selected week
            if (newWeekStart && isDateInNewWeek(date)) {
                dayElement.classList.add('selected-week');
            }
            
            calendarDates.appendChild(dayElement);
        }
    }
}

function isDateInNewWeek(date) {
    if (!newWeekStart) return false;
    const weekEnd = new Date(newWeekStart);
    weekEnd.setDate(weekEnd.getDate() + 6);
    return date >= newWeekStart && date <= weekEnd;
}

function selectNewWeekFromDate(date) {
    // Get Monday of the week containing this date
    const dayOfWeek = date.getDay();
    const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // Handle Sunday
    newWeekStart = new Date(date);
    newWeekStart.setDate(date.getDate() + mondayOffset);
    
    generateNewWeekCalendar();
    updateNewWeekRange();
    
    // Enable confirm button
    document.getElementById('confirmNewWeekBtn').disabled = false;
}

function updateNewWeekRange() {
    if (!newWeekStart) return;
    
    const weekEnd = new Date(newWeekStart);
    weekEnd.setDate(weekEnd.getDate() + 6);
    
    const formatDate = (date) => {
        return date.getFullYear() + '-' + 
               String(date.getMonth() + 1).padStart(2, '0') + '-' + 
               String(date.getDate()).padStart(2, '0');
    };
    
    const rangeText = formatDate(newWeekStart) + ' - ' + formatDate(weekEnd);
    document.getElementById('newWeekRange').textContent = rangeText;
}

function confirmCreateNewWeek() {
    const weekName = document.getElementById('newWeekName').value.trim();
    if (!weekName) {
        alert('Prašome įvesti savaitės pavadinimą');
        return;
    }
    
    if (!newWeekStart) {
        alert('Prašome pasirinkti savaitę kalendoriuje');
        return;
    }
    
    // Here you would typically make an API call to create the new week
    // For now, just show a success message
    const weekEnd = new Date(newWeekStart);
    weekEnd.setDate(weekEnd.getDate() + 6);
    
    const formatDate = (date) => {
        return date.getFullYear() + '-' + 
               String(date.getMonth() + 1).padStart(2, '0') + '-' + 
               String(date.getDate()).padStart(2, '0');
    };
    
    const weekRange = formatDate(newWeekStart) + ' - ' + formatDate(weekEnd);
    
    alert(`Nauja savaitė "${weekName}" (${weekRange}) bus sukurta!`);
    
    // Hide the new week calendar
    cancelNewWeek();
}


// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    initializeCalendar();
    calculateTotals();
});
</script>

<style>
/* TV-Planning Style Calendar - Updated for Tailwind */
.calendar-day-cell {
    @apply bg-white p-4 border border-gray-200 align-middle;
    min-height: 80px;
}

.calendar-day-cell.disabled {
    @apply bg-gray-50 text-gray-500;
}

.date-number {
    @apply text-2xl font-bold text-indigo-600 mb-1;
}

.date-month {
    @apply text-xs text-gray-500 uppercase mb-2 font-semibold;
}

.cpt-value {
    @apply text-sm font-bold text-green-600 bg-gray-50 px-2 py-1 border border-gray-200 rounded inline-block;
    min-width: 60px;
}

.calendar-date:hover:not(.disabled) {
    background-color: #e3f2fd;
}

.calendar-date.selected-week {
    background-color: #007bff;
    color: white;
    font-weight: bold;
}

.calendar-date.other-month {
    color: #adb5bd;
    background-color: #f8f9fa;
}

.calendar-date.disabled {
    background-color: #f8f9fa;
    color: #6c757d;
    cursor: not-allowed;
}

.selected-week-info {
    background-color: #f8f9fa;
    padding: 1rem;
    border-radius: 0.375rem;
    border: 1px solid #dee2e6;
}

.new-week-info {
    background-color: #f0f8f0;
    padding: 1rem;
    border-radius: 0.375rem;
    border: 1px solid #d4edda;
}

/* New week calendar specific styles */
.new-week-calendar-date:hover:not(.disabled) {
    background-color: #d4edda;
}

.new-week-calendar-date.selected-week {
    background-color: #28a745;
    color: white;
    font-weight: bold;
}

/* Animation for new week calendar */
#newWeekCalendarCard {
    animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Media Planning Table Styles */
.media-planning-table {
    font-size: 0.75rem;
    margin-bottom: 0;
}

.media-planning-table th {
    background-color: #007bff;
    color: white;
    font-weight: 600;
    text-align: center;
    vertical-align: middle;
    border: 1px solid #0056b3;
    padding: 0.25rem;
}

.media-planning-table td {
    padding: 0.2rem;
    vertical-align: middle;
    border: 1px solid #dee2e6;
}

.kartai-input {
    border: 1px solid #ced4da;
    padding: 2px 4px;
    font-size: 0.7rem;
    text-align: center;
    width: 100%;
    max-width: 45px;
}

.kartai-input:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.1rem rgba(0, 123, 255, 0.25);
}

.suma-display {
    font-size: 0.65rem;
    color: #28a745;
    font-weight: 500;
}

.screen-planning-card {
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Row alternating colors */
.kartai-row-1 {
    background-color: #ffffff;
}

.suma-row-1 {
    background-color: #f8f9fa !important;
}

.kartai-row-2 {
    background-color: #ffffff;
}

.suma-row-2 {
    background-color: #f8f9fa !important;
}

/* Responsive design */
@media (max-width: 768px) {
    .calendar-grid {
        font-size: 0.8rem;
    }
    
    .media-planning-table {
        font-size: 0.65rem;
    }
    
    .kartai-input {
        width: 35px;
        font-size: 0.6rem;
    }
}

/* Smooth horizontal scrolling for calendar */
.overflow-x-auto {
    scrollbar-width: thin;
    scrollbar-color: #cbd5e1 #f1f5f9;
}

.overflow-x-auto::-webkit-scrollbar {
    height: 8px;
}

.overflow-x-auto::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 4px;
}

.overflow-x-auto::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 4px;
}

.overflow-x-auto::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
}

/* Fade effect for scroll hint */
@keyframes fadeInOut {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 1; }
}

.scroll-hint {
    animation: fadeInOut 2s ease-in-out infinite;
}
</style>
{% endblock %}